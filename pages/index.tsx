import Head from "next/head";
import { GetServerSideProps } from "next";
import React, { useCallback, useState, useEffect, FormEvent } from "react";
import prisma from "../prisma/prisma";
import { classNames } from "../utils";
import { Alert } from "../components";
import type { ReactElement } from "react";
import MainLayout from "../layouts/Layout";
import DownshiftComponent from "../components/Downshift";
import { ExclamationCircleIcon } from "@heroicons/react/outline";
import LogsContent from "../components/LogsContent";

export default function Home({ ...props }) {
  const [channelWarning, setChannelWarning] = useState(false);
  const [nameWarning, setNameWarning] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [name, setName] = useState<string>("");
  const [ssrError, setSsrError] = useState(false);
  const [alert, setAlert] = useState<AlertList>(null);
  const [content, setContent] = useState<ContentProps | null>(null);
  const [items, setItems] = useState([]);

  useEffect(() => {
    if (ssrError) {
      setAlert({
        variant: "error",
        title: "Error while loading channels",
      });
    }
  }, [ssrError]);

  useEffect(() => {
    if (nameWarning) {
      setNameWarning(false);
    }
  }, [name]);

  useEffect(() => {
    if (props.response !== null) {
      setItems(props.response);
    } else {
      setSsrError(true);
    }
  }, [props]);

  const handleSelectedItemChange = useCallback(
    (selectedItem) => {
      if (!items.includes(selectedItem) && selectedItem === "")
        setChannelWarning(true);
      else {
        setSelectedItem(selectedItem);
        setChannelWarning(false);
      }
    },
    [items],
  );

  const handleFormSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setContent(null);
    if (selectedItem !== null && selectedItem !== "" && name !== "") {
      setContent({ channel: selectedItem, user: name });
    } else {
      if (selectedItem === null || selectedItem === "") {
        setChannelWarning(true);
      }
      if (name === "") {
        setNameWarning(true);
      }
    }
  };

  return (
    <div>
      <Head>
        <title>Logs | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <form className="flex flex-col mx-4" onSubmit={(event) => handleFormSubmit(event)}>
        {alert && (
          <Alert type={alert.variant} text={alert.text} title={alert.title} />
        )}
        <div className="flex flex-col w-full sm:w-[60%] sm:mx-auto my-6 sm:my-8 space-y-8">
          <div className="flex space-x-4">
            <DownshiftComponent
              className="w-full sm:w-[70%] relative flex items-center space-x-4"
              items={items}
              handleSelectedItemChange={handleSelectedItemChange}
            />
            <ExclamationCircleIcon
              className={classNames(
                channelWarning ? "opacity-100" : "opacity-0",
                `w-6 h-6 text-red-500 transform transition 
                duration-300 mt-auto mb-2`,
              )}
            >
              <span className="sr-only">
                Channel not found in the database.
              </span>
            </ExclamationCircleIcon>
          </div>
          <div className="w-full flex space-x-4">
            <div className="w-full sm:w-[70%]">
              <label
                htmlFor="userSelect"
                className="block text-sm font-medium text-gray-700 dark:text-gray-100 uppercase"
              >
                Choose a user:
              </label>
              <input
                id="userSelect"
                placeholder="trefis"
                value={name}
                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>
                  setName(event.target.value)
                }
                className="bg-white w-full dark:bg-[#333333] border border-gray-300 rounded-md mt-1
              shadow-sm pl-3 pr-10 py-2 text-left focus:outline-none focus:ring-1 dark:placeholder-gray-300
            focus:ring-primary focus:border-primary sm:text-sm transition duration-200 dark:border-gray-500"
              />
            </div>
            <ExclamationCircleIcon
              className={classNames(
                nameWarning ? "opacity-100" : "opacity-0",
                `w-6 h-6 text-red-500 transform transition 
                duration-300 mt-auto mb-2`,
              )}
            >
              <span className="sr-only">
                Channel not found in the database.
              </span>
            </ExclamationCircleIcon>
          </div>
          <div className="w-full sm:w-[70%] flex">
            <button
              className="w-full md:w-max ml-auto flex items-center justify-center px-5 py-2 border border-transparent 
              text-base font-medium rounded-md text-white bg-primary hover:bg-purple-500 
              focus:outline-primary duration-200 transition uppercase focus:outline-offset-2"
              type="submit"
            >
              Load logs
            </button>
          </div>
        </div>
        <div className="mx-auto w-full sm:w-[80%]">
          {content && (
            <LogsContent channel={content.channel} user={content.user} />
          )}
        </div>
      </form>
    </div>
  );
}

Home.getLayout = (page: ReactElement) => <MainLayout>{page}</MainLayout>;

export const getServerSideProps: GetServerSideProps = async () => {
  return await prisma.channels
    .findMany({
      where: { Availiable: 1 },
      select: { Name: true },
    })
    .then((response) => {
      const channelIDs = [];
      response.map((item: ChannelsResponse) => channelIDs.push(item.Name));
      return { props: { response: channelIDs } };
    })
    .catch((e) => {
      return {
        props: { response: null, value: { type: "error", message: e.message } },
      };
    });
};
