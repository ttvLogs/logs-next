import Head from "next/head";
import { GetServerSideProps } from "next";
import { useCallback, useMemo, useState, useEffect } from "react";
import prisma from "../prisma/prisma";
import { classNames } from "../utils";
import type { ReactElement } from "react";
import MainLayout from "../layouts/Layout";
import DownshiftComponent from "../components/Downshift";
import { ExclamationCircleIcon } from "@heroicons/react/outline";

export default function Home({ channels: props }) {
  console.log(props); //undefined
  const [channelWarning, setChannelWarning] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [loading, setLoading] = useState(false);
  const [items, setItems] = useState(["one", "two", "three"]);

  const handleSelectedItemChange = useCallback(
    (selectedItem) => {
      setSelectedItem(selectedItem);
      if (!items.includes(selectedItem)) setChannelWarning(true);
      else setChannelWarning(false);
    },
    [items],
  );

  return (
    <div>
      <Head>
        <title>Logs | Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex flex-col mx-4">
        <section className="flex flex-col w-full sm:w-[60%] sm:mx-auto my-6 sm:my-8 space-y-4">
          <div className="flex space-x-4">
            <DownshiftComponent
              className="w-full sm:w-[70%] relative flex items-center space-x-4"
              items={items}
              handleSelectedItemChange={handleSelectedItemChange}
            />
            <ExclamationCircleIcon
              className={classNames(
                channelWarning ? "opacity-100" : "opacity-0",
                `w-6 h-6 text-red-500 transform transition 
                duration-300 mt-auto mb-2`,
              )}
            >
              <span className="sr-only">Channel not found in the database</span>
            </ExclamationCircleIcon>
          </div>
          <p>{typeof props}</p> {/* undefined */}
        </section>
      </div>
    </div>
  );
}

Home.getLayout = (page: ReactElement) => <MainLayout>{page}</MainLayout>;

export const getServerSideProps: GetServerSideProps = async (context) => {
  return { props: { message: "return something" } };
  // return await prisma.channels
  //   .findMany({
  //     where: { Availiable: 1 },
  //     select: { ChannelID: true },
  //   })
  //   .then((response) => {
  //     return { props: response };
  //   })
  //   .catch(() => {
  //     return { props: null };
  //   });
};
